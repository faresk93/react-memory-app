{"version":3,"sources":["card/Card.js","guess-count/GuessCount.js","HallOfFame.js","App.js","registerServiceWorker.js","index.js"],"names":["Card","card","index","feedback","onClick","className","_","GuessCount","guesses","HallOfFame","entries","map","id","date","player","key","FAKE_HOF","App","state","cards","generateCards","currentPair","matchedCardsIndexes","handleCardClick","length","handleNewPairClosedBy","setState","result","candidates","shuffle","SIDE","pop","push","this","indexMatched","includes","newPair","newGuesses","matched","setTimeout","won","getFeedbackForCard","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.7e19e420.chunk.js","sourcesContent":["import React from 'react'\nimport './Card.css'\nimport PropTypes from 'prop-types'\n\nconst HIDDEN_SYMBOL = '❓';\n\nconst Card = ({card, index, feedback, onClick}) => {\n    return (\n        <div className={`card ${feedback}`}\n             onClick={_ => onClick(index)}>\n            <span className=\"symbol\">\n                {feedback === 'hidden' ? HIDDEN_SYMBOL : card}\n            </span>\n        </div>\n    )\n};\n\nCard.propTypes = {\n    card: PropTypes.string.isRequired,\n    index: PropTypes.number.isRequired,\n    feedback: PropTypes.oneOf([\n        'visible', 'hidden', 'justMatched', 'justMismatched'\n    ]),\n    onClick: PropTypes.func.isRequired\n\n};\n\nexport default Card\n","import React from 'react'\nimport './GuessCount.css'\nimport PropTypes from 'prop-types'\n\n// Guess SFC\nconst GuessCount = ({guesses}) => <div className=\"guesses\">N° of Guesses: <strong>{guesses}</strong></div>\n// Prop Types\nGuessCount.propTypes = {\n    guesses: PropTypes.number.isRequired\n};\n\nexport default GuessCount\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './HallOfFame.css'\n\nconst HallOfFame = ({entries}) => (\n    <table className=\"hallOfFame\">\n        <tbody>\n        {entries.map(({id, date, guesses, player}) => (\n            <tr key={id}>\n                <td className=\"date\">{date}</td>\n                <td className=\"guesses\">{guesses}</td>\n                <td className=\"player\">{player}</td>\n            </tr>\n        ))}\n        </tbody>\n    </table>\n)\n\nHallOfFame.propTypes = {\n    entries: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            date: PropTypes.string.isRequired,\n            guesses: PropTypes.number.isRequired,\n            player: PropTypes.string.isRequired\n        })\n    ).isRequired\n};\n\nexport default HallOfFame\n\n// == Internal helpers ==============================================\n\nexport const FAKE_HOF = [\n    {id: 3, guesses: 18, date: '10/10/2017', player: 'Jane'},\n    {id: 2, guesses: 23, date: '11/10/2017', player: 'Kevin'},\n    {id: 1, guesses: 31, date: '06/10/2017', player: 'Louisa'},\n    {id: 0, guesses: 48, date: '14/10/2017', player: 'Marc'},\n]\n\n","import React, {Component} from 'react'\nimport shuffle from 'lodash.shuffle'\n\nimport './App.css'\n\nimport Card from './card/Card'\nimport GuessCount from './guess-count/GuessCount'\nimport HallOfFame, {FAKE_HOF} from \"./HallOfFame\";\n\nconst SIDE = 6\nconst SYMBOLS = '😀🎉💖🎩🐶🐱🦄🐬🌍🌛🌞💫🍎🍌🍓🍐🍟🍿'\nconst VISUAL_PAUSE_MSECS = 750\n\nclass App extends Component {\n\n    state = {\n        cards: this.generateCards(),\n        currentPair: [],\n        matchedCardsIndexes: [],\n        guesses: 0\n    };\n\n    generateCards() {\n        const result = []\n        const size = SIDE * SIDE\n        const candidates = shuffle(SYMBOLS)\n        while (result.length < size) {\n            const card = candidates.pop()\n            result.push(card, card)\n        }\n        return shuffle(result)\n    }\n\n    getFeedbackForCard(index) {\n        const {currentPair, matchedCardsIndexes} = this.state\n        const indexMatched = matchedCardsIndexes.includes(index)\n\n        if (currentPair.length < 2) {\n            return indexMatched || index === currentPair[0] ? 'visible' : 'hidden'\n        }\n\n        if (currentPair.includes(index)) {\n            return indexMatched ? 'justMatched' : 'justMismatched'\n        }\n\n        return indexMatched ? 'visible' : 'hidden'\n    }\n\n    // arrow function for this scope\n    handleCardClick = index => {\n        const {currentPair} = this.state\n        if (currentPair.length === 0) {\n            this.setState({currentPair: [index]});\n            return;\n        }\n        if (currentPair.length === 2) {\n            return;\n        }\n        this.handleNewPairClosedBy(index)\n    };\n\n    handleNewPairClosedBy(index) {\n        const {cards, currentPair, guesses, matchedCardsIndexes} = this.state\n\n        const newPair = [currentPair[0], index]\n        const newGuesses = guesses + 1\n        const matched = cards[newPair[0]] === cards[newPair[1]]\n        this.setState({currentPair: newPair, guesses: newGuesses})\n        if (matched) {\n            this.setState({matchedCardsIndexes: [...matchedCardsIndexes, ...newPair]})\n        }\n        setTimeout(() => this.setState({currentPair: []}), VISUAL_PAUSE_MSECS)\n    }\n\n    render() {\n        const {cards, guesses, matchedCardsIndexes} = this.state\n        const won = matchedCardsIndexes.length === cards.length;\n        return (\n            <div className=\"memory\">\n                <GuessCount guesses={guesses}/>\n                {\n                    cards.map((card, index) => (\n                        <Card\n                            key={index}\n                            card={card}\n                            index={index}\n                            feedback={this.getFeedbackForCard(index)}\n                            onClick={this.handleCardClick}\n                        />\n                    ))\n                }\n                {won && <HallOfFame entries={FAKE_HOF}/>}\n            </div>\n        )\n    }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport registerServiceWorker from './registerServiceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}