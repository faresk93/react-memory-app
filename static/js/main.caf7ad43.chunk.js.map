{"version":3,"sources":["card/Card.js","guess-count/GuessCount.js","HallOfFame.js","HighScoreInput.js","timer/Timer.js","App.js","registerServiceWorker.js","index.js"],"names":["Card","card","index","feedback","difficulty","onClick","difficultyClass","getDifficultyClass","className","event","GuessCount","guesses","HallOfFame","entries","map","id","date","player","time","key","saveHOFEntry","entry","onStored","Date","toLocaleDateString","now","JSON","parse","localStorage","getItem","insertionPoint","findIndex","push","splice","length","setItem","stringify","HighScoreInput","state","winner","handleWinnerUpdate","setState","target","value","toUpperCase","persistWinner","preventDefault","timerTime","props","Math","floor","newEntry","console","log","onSubmit","this","type","autoComplete","onChange","Button","variant","Component","Timer","seconds","minutes","hours","DEFAULT_STATE","cards","currentPair","matchedCardsIndexes","hallOfFame","gameStart","gameStarted","timer","timerOn","timerStart","countDown","App","refTest","React","createRef","startGame","setInterval","setTimeout","startTimer","clearInterval","displayHOF","onHandleDifficulty","generateCards","handleCardClick","handleNewPairClosedBy","size","pow","result","candidates","shuffle","pop","indexMatched","includes","newPair","newGuesses","matched","prevState","won","ref","src","alt","style","cursor","getFeedbackForCard","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.caf7ad43.chunk.js","sourcesContent":["import React from 'react'\nimport './Card.css'\nimport PropTypes from 'prop-types'\n\nconst HIDDEN_SYMBOL = '❓';\nconst getDifficultyClass = (difficulty) => {\n    switch (difficulty) {\n        case 2:\n            return 'easy';\n        case 4:\n            return 'medium';\n        case 6:\n            return 'hard';\n        default:\n            return 'medium'\n    }\n};\nconst Card = ({card, index, feedback, difficulty, onClick}) => {\n    const difficultyClass = getDifficultyClass(difficulty);\n    return (\n        <div className={`flip-card ${feedback} ${difficultyClass}`} onClick={event => onClick(index, event)}>\n            <div className={`flip-card-inner ${feedback !== 'hidden' && 'flipped'}`}>\n                <div className=\"flip-card-front\">\n                    {/*{feedback === 'hidden' ? HIDDEN_SYMBOL : card}*/}\n                    <span className=\"symbol\">{HIDDEN_SYMBOL}</span>\n                </div>\n                <div className=\"flip-card-back\">\n                    <span className=\"symbol\">{card}</span>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nCard.propTypes = {\n    card: PropTypes.string.isRequired,\n    index: PropTypes.number.isRequired,\n    feedback: PropTypes.oneOf([\n        'visible', 'hidden', 'justMatched', 'justMismatched'\n    ]),\n    difficulty: PropTypes.number.isRequired,\n    onClick: PropTypes.func.isRequired\n\n};\n\nexport default Card\n","import React from 'react'\nimport './GuessCount.css'\nimport PropTypes from 'prop-types'\n\n// Guess SFC\nconst GuessCount = ({guesses}) => (\n    <div className=\"guesses ml-2\">N° of Guesses: <strong className=\"text-white bg-dark p-2\">{guesses}</strong></div>\n);\n// Prop Types\nGuessCount.propTypes = {\n    guesses: PropTypes.number.isRequired\n};\n\nexport default GuessCount\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './HallOfFame.css'\n\nconst HallOfFame = ({entries}) => (\n    <div className=\"w-100\">\n        <div className=\"alert alert-success w-100 text-center\">Won !</div>\n        <table className=\"hallOfFame\">\n            <thead>\n            <th>Date</th>\n            <th>Guesses</th>\n            <th>Name</th>\n            <th>Time</th>\n            </thead>\n            <tbody>\n            {entries.map(({id, date, guesses, player, time}) => (\n                <tr key={id}>\n                    <td className=\"date\">{date}</td>\n                    <td className=\"guesses\">{guesses}</td>\n                    <td className=\"player\">{player}</td>\n                    <td className=\"time\">{time}</td>\n                </tr>\n            ))}\n            </tbody>\n        </table>\n    </div>\n);\n\nHallOfFame.propTypes = {\n    entries: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            date: PropTypes.string.isRequired,\n            guesses: PropTypes.number.isRequired,\n            player: PropTypes.string.isRequired\n        })\n    ).isRequired\n};\n\nexport default HallOfFame\n\nconst HOF_KEY = '::Memory::HallofFame'\nconst HOF_MAX_SIZE = 10\n\nexport function saveHOFEntry(entry, onStored) {\n    entry.date = new Date().toLocaleDateString()\n    entry.id = Date.now()\n\n    const entries = JSON.parse(localStorage.getItem(HOF_KEY) || '[]')\n    const insertionPoint = entries.findIndex(\n        ({guesses}) => guesses >= entry.guesses\n    )\n\n    if (insertionPoint === -1) {\n        entries.push(entry)\n    } else {\n        entries.splice(insertionPoint, 0, entry)\n    }\n    if (entries.length > HOF_MAX_SIZE) {\n        entries.splice(HOF_MAX_SIZE, entries.length)\n    }\n\n    localStorage.setItem(HOF_KEY, JSON.stringify(entries))\n    onStored(entries)\n}\n\n","import PropTypes from 'prop-types'\nimport React, {Component} from 'react'\nimport {Button} from 'react-bootstrap'\nimport './HighScoreInput.css'\nimport {saveHOFEntry} from \"./HallOfFame\";\n\nclass HighScoreInput extends Component {\n    state = {winner: ''};\n    // arrow function for this binding\n    handleWinnerUpdate = event => {\n        this.setState({winner: event.target.value.toUpperCase()})\n\n    };\n    persistWinner = event => {\n        event.preventDefault();\n        const timerTime = this.props.time\n        let seconds = Math.floor(timerTime / 1000) % 60\n        const time = seconds + 's'\n        const newEntry = {guesses: this.props.guesses, player: this.state.winner, time}\n        console.log(this.props.time)\n        saveHOFEntry(newEntry, this.props.onStored)\n    };\n\n    render() {\n        return (\n            <form className=\"highScoreInput\" onSubmit={this.persistWinner}>\n                <p>\n                    <label>\n                        <span className=\"badge badge-success\">Good Work</span> ! Enter your name :\n                        <input\n                            className=\"form-control\"\n                            type=\"text\"\n                            autoComplete=\"given-name\"\n                            value={this.state.winner}\n                            onChange={this.handleWinnerUpdate}\n                        />\n                    </label>\n                    <Button variant=\"success\" type={\"submit\"}>I won</Button>\n                </p>\n            </form>\n        )\n    }\n}\n\nHighScoreInput.propTypes = {\n    guesses: PropTypes.number.isRequired,\n    onStored: PropTypes.func.isRequired\n}\n\nexport default HighScoreInput\n","import React from \"react\";\r\n\r\nexport const Timer = (props) => {\r\n    const {timerTime} = props;\r\n    let seconds = Math.floor(timerTime / 1000) % 60\r\n    let minutes = Math.floor(timerTime / 60000) % 60\r\n    let hours = Math.floor(timerTime / 3600000)\r\n    return (\r\n        <div className=\"timer-time\">\r\n            {hours >=1 && hours + 'h : '}{minutes >=1 && minutes + 'm : '}{seconds >= 0 && seconds + 's'}\r\n        </div>\r\n    )\r\n}\r\n","import React, {Component} from 'react'\nimport shuffle from 'lodash.shuffle'\nimport './App.scss'\nimport Card from './card/Card'\nimport GuessCount from './guess-count/GuessCount'\nimport HallOfFame from \"./HallOfFame\";\nimport HighScoreInput from \"./HighScoreInput\";\nimport {Timer} from \"./timer/Timer\";\n\nexport const SYMBOLS = '😀🎉💖🎩🐶🐱🦄🐬🌍🌛🌞💫🍎🍌🍓🍐🍟🍿'\nconst VISUAL_PAUSE_MSECS = 750\nconst SHOW_CARDS_TIMEOUT = 3000\nconst DEFAULT_STATE = {\n    cards: [],\n    currentPair: [],\n    matchedCardsIndexes: [],\n    guesses: 0,\n    difficulty: 4,\n    hallOfFame: null,\n    gameStart: false,\n    gameStarted: false,\n    timer: null,\n    timerOn: false,\n    timerStart: 0,\n    timerTime: 0,\n    countDown: 3\n}\n\nclass App extends Component {\n    timer;\n    countDown;\n\n    constructor(props) {\n        super(props);\n        this.state = {...DEFAULT_STATE, cards: this.generateCards(4)};\n    }\n\n    refTest = React.createRef();\n\n    startGame = () => {\n        this.setState({gameStart: true, gameStarted: false, countDown: 3})\n        this.countDown = setInterval(() => {\n            this.setState({\n                countDown: this.state.countDown - 1\n            })\n        }, 1000)\n        setTimeout(() => {\n            this.setState({gameStarted: true});\n            this.startTimer();\n            clearInterval(this.countDown);\n        }, SHOW_CARDS_TIMEOUT)\n    };\n    startTimer = () => {\n        clearInterval(this.timer);\n        this.setState({\n            timerOn: true,\n            timerTime: this.state.timerTime,\n            timerStart: Date.now() - this.state.timerTime\n        });\n        // this.setState({\n        this.timer = setInterval(() => {\n            this.setState({\n                timerTime: Date.now() - this.state.timerStart\n            });\n        }, 10)\n        console.log('timer', this.timer)\n        // })\n    };\n\n    componentDidMount() {\n        // document.title = 'Tick-Tack-Toe'\n    }\n\n\n    // arrow function for this binding\n    displayHOF = hallOfFame => {\n        this.setState({hallOfFame})\n    }\n\n    generateCards(size) {\n        const difficulty = Math.pow(size, 2)\n        const result = []\n        const candidates = shuffle(SYMBOLS)\n        while (result.length < difficulty) {\n            const card = candidates.pop()\n            result.push(card, card)\n        }\n        return shuffle(result)\n    }\n\n    getFeedbackForCard(index) {\n\n        if (!this.state.gameStarted) {\n            return 'visible'\n        } else {\n            const {currentPair, matchedCardsIndexes} = this.state\n            const indexMatched = matchedCardsIndexes.includes(index)\n\n            if (currentPair.length < 2) {\n                return indexMatched || index === currentPair[0] ? 'visible' : 'hidden'\n            }\n\n            if (currentPair.includes(index)) {\n                return indexMatched ? 'justMatched' : 'justMismatched'\n            }\n            return indexMatched ? 'visible' : 'hidden'\n        }\n    }\n\n    onHandleDifficulty = (event) => {\n        const difficulty = +event.target.value;\n        this.setState({\n            ...DEFAULT_STATE,\n            difficulty,\n            cards: this.generateCards(difficulty),\n            gameStart: true\n        })\n        this.startGame();\n    };\n\n\n    // arrow function for this scope\n    handleCardClick = (index, event) => {\n        const {currentPair} = this.state\n        if (currentPair.length === 0) {\n            this.setState({currentPair: [index]});\n            return;\n        }\n        if (currentPair.length === 2) {\n            return;\n        }\n        this.handleNewPairClosedBy(index, event)\n    };\n\n    handleNewPairClosedBy(index, event) {\n        let {cards, currentPair, guesses, matchedCardsIndexes} = this.state\n        if (currentPair[0] === index) {\n            return;\n        }\n        const newPair = [currentPair[0], index]\n        const newGuesses = guesses + 1\n        const matched = cards[newPair[0]] === cards[newPair[1]]\n        this.setState({currentPair: newPair, guesses: newGuesses})\n        if (matched) {\n            this.setState((prevState, props) => (\n                {matchedCardsIndexes: [...prevState.matchedCardsIndexes, ...newPair]}\n            ), () => {\n                const won = this.state.matchedCardsIndexes.length === cards.length;\n                if (won) {\n                    console.log('won', this.timer)\n                    clearInterval(this.timer);\n                    // this.setState({timerOn: false});\n                }\n            })\n        }\n\n        setTimeout(() => this.setState({currentPair: []}), VISUAL_PAUSE_MSECS)\n    }\n\n    render() {\n        const {cards, guesses, matchedCardsIndexes, hallOfFame} = this.state\n        const won = matchedCardsIndexes.length === cards.length;\n        return (\n            <div ref={this.refTest}>\n                {this.state.gameStart ?\n                    (<div className=\"game-board\">\n                        <div className=\"game\">\n                            <div className=\"title\">\n                                <h1>Tic-Tac-Toe</h1>\n                                <span>Game</span>\n                            </div>\n                            <div className=\"logo\">\n                                <img\n                                    src=\"https://talan.com/typo3conf/ext/subtheme_t3kit_talan/Resources/Public/Images/logo-talan.png\"\n                                    alt=\"logo-Talan\"/>\n                            </div>\n                        </div>\n                        <div className=\"memory mt-5\">\n                            <div className=\"fares\">\n                                <h1>By Fares</h1>\n                            </div>\n                            <div className=\"w-100 mb-3\">\n                                <div className=\"d-flex\">\n                                    <label className=\"w-50 my-auto\">\n                                        <span className=\"badge badge-light difficulty\">Memory Level: </span>\n                                    </label>\n                                    <select className=\"form-control\" style={{cursor: 'pointer'}}\n                                            onChange={this.onHandleDifficulty}\n                                            value={this.state.difficulty}>\n                                        <option value=\"2\">Turtle</option>\n                                        <option value=\"4\">Elephant</option>\n                                        <option value=\"6\">Dolphin</option>\n                                    </select>\n                                </div>\n                            </div>\n                            <GuessCount guesses={guesses}/>\n                            <div className=\"cards\">\n\n                                <div className=\"timer\">\n                                    {this.state.timerOn ? <Timer timerTime={this.state.timerTime}/> : (\n                                        <span>{this.state.countDown}</span>\n                                    )}\n                                </div>\n                                {\n                                    cards.map((card, index) => (\n                                        <Card\n                                            key={index}\n                                            card={card}\n                                            index={index}\n                                            difficulty={this.state.difficulty}\n                                            feedback={this.getFeedbackForCard(index)}\n                                            onClick={this.handleCardClick}\n                                        />\n                                    ))\n                                }\n                            </div>\n                            {won && (\n                                hallOfFame ? <HallOfFame entries={hallOfFame}/> :\n                                    <HighScoreInput time={this.state.timerTime} guesses={guesses}\n                                                    onStored={this.displayHOF}/>\n                            )}\n                        </div>\n                    </div>) :\n                    <div className=\"game-start\">\n                        <div className=\"start-button\" onClick={this.startGame}>Start Game</div>\n                    </div>\n                }\n\n            </div>\n        )\n    }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport registerServiceWorker from './registerServiceWorker'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}