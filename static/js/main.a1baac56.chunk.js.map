{"version":3,"sources":["card/Card.js","guess-count/GuessCount.js","HallOfFame.js","HighScoreInput.js","App.js","registerServiceWorker.js","index.js"],"names":["Card","card","index","feedback","difficulty","onClick","difficultyClass","getDifficultyClass","className","_","GuessCount","guesses","HallOfFame","entries","map","id","date","player","key","saveHOFEntry","entry","onStored","Date","toLocaleDateString","now","JSON","parse","localStorage","getItem","insertionPoint","findIndex","push","splice","length","setItem","stringify","HighScoreInput","state","winner","handleWinnerUpdate","event","setState","target","value","toUpperCase","persistWinner","preventDefault","props","onSubmit","this","type","autoComplete","onChange","Button","variant","Component","DEFAULT_STATE","cards","currentPair","matchedCardsIndexes","hallOfFame","App","refTest","React","createRef","displayHOF","onHandleDifficulty","generateCards","handleCardClick","handleNewPairClosedBy","document","title","size","Math","pow","result","candidates","shuffle","pop","indexMatched","includes","newPair","newGuesses","matched","setTimeout","won","ref","src","alt","defaultValue","getFeedbackForCard","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"2WA6CeA,G,YA5BF,SAAC,GAAkD,IAAjDC,EAAgD,EAAhDA,KAAMC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,QACxCC,EAbiB,SAACF,GACxB,OAAQA,GACJ,KAAK,EACD,MAAO,OACX,KAAK,EACD,MAAO,SACX,KAAK,EACD,MAAO,OACX,QACI,MAAO,UAISG,CAAmBH,GAC3C,OACI,yBAAKI,UAAS,oBAAeL,EAAf,YAA2BG,GAAmBD,QAAS,SAAAI,GAAC,OAAIJ,EAAQH,KAC9E,yBAAKM,UAAS,0BAAkC,WAAbL,GAAyB,YACxD,yBAAKK,UAAU,mBAEX,0BAAMA,UAAU,UApBd,WAsBN,yBAAKA,UAAU,kBACX,0BAAMA,UAAU,UAAUP,QCd/BS,G,MARI,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAAF,OACf,yBAAKH,UAAU,gBAAf,qBAA6C,4BAAQA,UAAU,0BAA0BG,MC2B9EC,G,MA5BI,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAAF,OACf,yBAAKL,UAAU,SACX,yBAAKA,UAAU,yCAAf,cACA,2BAAOA,UAAU,cACb,+BACCK,EAAQC,KAAI,gBAAEC,EAAF,EAAEA,GAAIC,EAAN,EAAMA,KAAML,EAAZ,EAAYA,QAASM,EAArB,EAAqBA,OAArB,OACT,wBAAIC,IAAKH,GACL,wBAAIP,UAAU,QAAQQ,GACtB,wBAAIR,UAAU,WAAWG,GACzB,wBAAIH,UAAU,UAAUS,YAiCrC,SAASE,EAAaC,EAAOC,GAChCD,EAAMJ,MAAO,IAAIM,MAAOC,qBACxBH,EAAML,GAAKO,KAAKE,MAEhB,IAAMX,EAAUY,KAAKC,MAAMC,aAAaC,QAP5B,yBAOgD,MACtDC,EAAiBhB,EAAQiB,WAC3B,qBAAEnB,SAAwBS,EAAMT,YAGZ,IAApBkB,EACAhB,EAAQkB,KAAKX,GAEbP,EAAQmB,OAAOH,EAAgB,EAAGT,GAElCP,EAAQoB,OAhBK,IAiBbpB,EAAQmB,OAjBK,GAiBgBnB,EAAQoB,QAGzCN,aAAaO,QArBD,uBAqBkBT,KAAKU,UAAUtB,IAC7CQ,EAASR,G,YCrBEuB,G,iNAtCXC,MAAQ,CAACC,OAAQ,I,EAEjBC,mBAAqB,SAAAC,GACjB,EAAKC,SAAS,CAACH,OAAQE,EAAME,OAAOC,MAAMC,iB,EAG9CC,cAAgB,SAAAL,GACZA,EAAMM,iBAEN3B,EADiB,CAACR,QAAS,EAAKoC,MAAMpC,QAASM,OAAQ,EAAKoB,MAAMC,QAC3C,EAAKS,MAAM1B,W,wEAIlC,OACI,0BAAMb,UAAU,iBAAiBwC,SAAUC,KAAKJ,eAC5C,2BACI,+BACI,0BAAMrC,UAAU,uBAAhB,SADJ,uBAEI,2BACIA,UAAU,eACV0C,KAAK,OACLC,aAAa,aACbR,MAAOM,KAAKZ,MAAMC,OAClBc,SAAUH,KAAKV,sBAGvB,kBAACc,EAAA,EAAD,CAAQC,QAAQ,UAAUJ,KAAM,UAAhC,uB,GA3BSK,cCIvBC,EAAgB,CAClBC,MAAO,GACPC,YAAa,GACbC,oBAAqB,GACrBhD,QAAS,EACTP,WAAY,EACZwD,WAAY,MAsIDC,E,YAhIX,WAAYd,GAAQ,IAAD,8BACf,4CAAMA,KAHVe,QAAUC,IAAMC,YAEG,EAWnBC,WAAa,SAAAL,GACT,EAAKnB,SAAS,CAACmB,gBAZA,EAyCnBM,mBAAqB,SAAC1B,GAClB,IAAMpC,GAAcoC,EAAME,OAAOC,MACjC,EAAKF,SAAL,eAAkBe,EAAlB,CAAiCpD,aAAYqD,MAAO,EAAKU,cAAc/D,OA3CxD,EAgDnBgE,gBAAkB,SAAAlE,GAAU,IACjBwD,EAAe,EAAKrB,MAApBqB,YACoB,IAAvBA,EAAYzB,OAIW,IAAvByB,EAAYzB,QAGhB,EAAKoC,sBAAsBnE,GANvB,EAAKuC,SAAS,CAACiB,YAAa,CAACxD,MAjDjC,EAAKmC,MAAL,eAAiBmB,EAAjB,CAAgCC,MAAO,EAAKU,cAAc,KAF3C,E,iFAMfG,SAASC,MAAQ,kB,oCASPC,GAIV,IAHA,IAAMpE,EAAaqE,KAAKC,IAAIF,EAAM,GAC5BG,EAAS,GACTC,EAAaC,IAhCJ,4NAiCRF,EAAO1C,OAAS7B,GAAY,CAC/B,IAAMH,EAAO2E,EAAWE,MACxBH,EAAO5C,KAAK9B,EAAMA,GAEtB,OAAO4E,IAAQF,K,yCAGAzE,GAAQ,IAAD,EACqB+C,KAAKZ,MAAzCqB,EADe,EACfA,YACDqB,EAFgB,EACFpB,oBACqBqB,SAAS9E,GAElD,OAAIwD,EAAYzB,OAAS,EACd8C,GAAgB7E,IAAUwD,EAAY,GAAK,UAAY,SAG9DA,EAAYsB,SAAS9E,GACd6E,EAAe,cAAgB,iBAGnCA,EAAe,UAAY,W,4CAsBhB7E,GAAQ,IAAD,SACkC+C,KAAKZ,MAAzDoB,EADkB,EAClBA,MAAOC,EADW,EACXA,YAAa/C,EADF,EACEA,QAASgD,EADX,EACWA,oBAE9BsB,EAAU,CAACvB,EAAY,GAAIxD,GAC3BgF,EAAavE,EAAU,EACvBwE,EAAU1B,EAAMwB,EAAQ,MAAQxB,EAAMwB,EAAQ,IACpDhC,KAAKR,SAAS,CAACiB,YAAauB,EAAStE,QAASuE,IAC1CC,GACAlC,KAAKR,SAAS,CAACkB,oBAAoB,GAAD,mBAAMA,GAAwBsB,KAEpEG,YAAW,kBAAM,EAAK3C,SAAS,CAACiB,YAAa,OAnF1B,O,+BAsFb,IAAD,SACqDT,KAAKZ,MAAxDoB,EADF,EACEA,MAAO9C,EADT,EACSA,QAASgD,EADlB,EACkBA,oBAAqBC,EADvC,EACuCA,WACtCyB,EAAM1B,EAAoB1B,SAAWwB,EAAMxB,OACjD,OACI,yBAAKqD,IAAKrC,KAAKa,SACX,yBAAKtD,UAAU,QACX,yBAAKA,UAAU,SACX,2CACA,uCAEJ,yBAAKA,UAAU,QACX,yBAAK+E,IAAI,8FAA8FC,IAAI,iBAGnH,yBAAKhF,UAAU,eACX,yBAAKA,UAAU,SACX,yCAEJ,yBAAKA,UAAU,cACX,yBAAKA,UAAU,UACX,2BAAOA,UAAU,gBACb,0BAAMA,UAAU,gCAAhB,wBAEJ,4BAAQA,UAAU,eAAe4C,SAAUH,KAAKiB,mBAAoBuB,aAAc,GAC9E,4BAAQ9C,MAAM,KAAd,QACA,4BAAQA,MAAM,KAAd,UACA,4BAAQA,MAAM,KAAd,WAIZ,kBAAC,EAAD,CAAYhC,QAASA,IACrB,yBAAKH,UAAU,SAEPiD,EAAM3C,KAAI,SAACb,EAAMC,GAAP,OACN,kBAAC,EAAD,CACIgB,IAAKhB,EACLD,KAAMA,EACNC,MAAOA,EACPE,WAAY,EAAKiC,MAAMjC,WACvBD,SAAU,EAAKuF,mBAAmBxF,GAClCG,QAAS,EAAK+D,sBAK7BiB,IACGzB,EAAa,kBAAC,EAAD,CAAY/C,QAAS+C,IAC9B,kBAAC,EAAD,CAAgBjD,QAASA,EAASU,SAAU4B,KAAKgB,oB,GA3H3DV,aCTZoC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBpE,QACf8D,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,M,MChEjEC,IAASC,OAAO,kBAAC,EAAD,MAAS5C,SAAS6C,eAAe,SDclC,WACb,GAA6C,kBAAmBhB,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,oBAAwBxB,OAAOC,UAC3CwB,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAO0B,iBAAiB,QAAQ,WAC9B,IAAMrB,EAAK,UAAMmB,oBAAN,sBAEN1B,EAwCX,SAAiCO,GAE/BsB,MAAMtB,GACHI,MAAK,SAAAmB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C1B,UAAUC,cAAc0B,MAAMxB,MAAK,SAAAC,GACjCA,EAAawB,aAAazB,MAAK,WAC7BT,OAAOC,SAASkC,eAKpB/B,EAAgBC,MAGnBa,OAAM,WACLF,QAAQC,IACN,oEAzDAmB,CAAwB/B,GAHxBD,EAAgBC,OC7BxBgC,K","file":"static/js/main.a1baac56.chunk.js","sourcesContent":["import React from 'react'\nimport './Card.css'\nimport PropTypes from 'prop-types'\n\nconst HIDDEN_SYMBOL = '❓';\nconst getDifficultyClass = (difficulty) => {\n    switch (difficulty) {\n        case 2:\n            return 'easy';\n        case 4:\n            return 'medium';\n        case 6:\n            return 'hard';\n        default:\n            return 'medium'\n    }\n};\nconst Card = ({card, index, feedback, difficulty, onClick}) => {\n    const difficultyClass = getDifficultyClass(difficulty);\n    return (\n        <div className={`flip-card ${feedback} ${difficultyClass}`} onClick={_ => onClick(index)}>\n            <div className={`flip-card-inner ${feedback !== 'hidden' && 'flipped'}`}>\n                <div className=\"flip-card-front\">\n                    {/*{feedback === 'hidden' ? HIDDEN_SYMBOL : card}*/}\n                    <span className=\"symbol\">{HIDDEN_SYMBOL}</span>\n                </div>\n                <div className=\"flip-card-back\">\n                    <span className=\"symbol\">{card}</span>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nCard.propTypes = {\n    card: PropTypes.string.isRequired,\n    index: PropTypes.number.isRequired,\n    feedback: PropTypes.oneOf([\n        'visible', 'hidden', 'justMatched', 'justMismatched'\n    ]),\n    difficulty: PropTypes.number.isRequired,\n    onClick: PropTypes.func.isRequired\n\n};\n\nexport default Card\n","import React from 'react'\nimport './GuessCount.css'\nimport PropTypes from 'prop-types'\n\n// Guess SFC\nconst GuessCount = ({guesses}) => (\n    <div className=\"guesses ml-2\">N° of Guesses: <strong className=\"text-white bg-dark p-2\">{guesses}</strong></div>\n);\n// Prop Types\nGuessCount.propTypes = {\n    guesses: PropTypes.number.isRequired\n};\n\nexport default GuessCount\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './HallOfFame.css'\n\nconst HallOfFame = ({entries}) => (\n    <div className=\"w-100\">\n        <div className=\"alert alert-success w-100 text-center\">Gagné !</div>\n        <table className=\"hallOfFame\">\n            <tbody>\n            {entries.map(({id, date, guesses, player}) => (\n                <tr key={id}>\n                    <td className=\"date\">{date}</td>\n                    <td className=\"guesses\">{guesses}</td>\n                    <td className=\"player\">{player}</td>\n                </tr>\n            ))}\n            </tbody>\n        </table>\n    </div>\n);\n\nHallOfFame.propTypes = {\n    entries: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            date: PropTypes.string.isRequired,\n            guesses: PropTypes.number.isRequired,\n            player: PropTypes.string.isRequired\n        })\n    ).isRequired\n};\n\nexport default HallOfFame\n\n// == Internal helpers ==============================================\n\nexport const FAKE_HOF = [\n    {id: 3, guesses: 18, date: '10/10/2017', player: 'Jane'},\n    {id: 2, guesses: 23, date: '11/10/2017', player: 'Kevin'},\n    {id: 1, guesses: 31, date: '06/10/2017', player: 'Louisa'},\n    {id: 0, guesses: 48, date: '14/10/2017', player: 'Marc'},\n]\n\nconst HOF_KEY = '::Memory::HallofFame'\nconst HOF_MAX_SIZE = 10\n\nexport function saveHOFEntry(entry, onStored) {\n    entry.date = new Date().toLocaleDateString()\n    entry.id = Date.now()\n\n    const entries = JSON.parse(localStorage.getItem(HOF_KEY) || '[]')\n    const insertionPoint = entries.findIndex(\n        ({guesses}) => guesses >= entry.guesses\n    )\n\n    if (insertionPoint === -1) {\n        entries.push(entry)\n    } else {\n        entries.splice(insertionPoint, 0, entry)\n    }\n    if (entries.length > HOF_MAX_SIZE) {\n        entries.splice(HOF_MAX_SIZE, entries.length)\n    }\n\n    localStorage.setItem(HOF_KEY, JSON.stringify(entries))\n    onStored(entries)\n}\n\n","import PropTypes from 'prop-types'\nimport React, {Component} from 'react'\nimport {Button} from 'react-bootstrap'\nimport './HighScoreInput.css'\nimport {saveHOFEntry} from \"./HallOfFame\";\n\nclass HighScoreInput extends Component {\n    state = {winner: ''};\n    // arrow function for this binding\n    handleWinnerUpdate = event => {\n        this.setState({winner: event.target.value.toUpperCase()})\n\n    };\n    persistWinner = event => {\n        event.preventDefault();\n        const newEntry = {guesses: this.props.guesses, player: this.state.winner}\n        saveHOFEntry(newEntry, this.props.onStored)\n    };\n\n    render() {\n        return (\n            <form className=\"highScoreInput\" onSubmit={this.persistWinner}>\n                <p>\n                    <label>\n                        <span className=\"badge badge-success\">Bravo</span> ! Enter your name :\n                        <input\n                            className=\"form-control\"\n                            type=\"text\"\n                            autoComplete=\"given-name\"\n                            value={this.state.winner}\n                            onChange={this.handleWinnerUpdate}\n                        />\n                    </label>\n                    <Button variant=\"success\" type={\"submit\"}>J'ai gagné</Button>\n                </p>\n            </form>\n        )\n    }\n}\n\nHighScoreInput.propTypes = {\n    guesses: PropTypes.number.isRequired,\n    onStored: PropTypes.func.isRequired\n}\n\nexport default HighScoreInput\n","import React, {Component} from 'react'\nimport shuffle from 'lodash.shuffle'\nimport './App.css'\nimport Card from './card/Card'\nimport GuessCount from './guess-count/GuessCount'\nimport HallOfFame from \"./HallOfFame\";\nimport HighScoreInput from \"./HighScoreInput\";\n\nexport const SYMBOLS = '😀🎉💖🎩🐶🐱🦄🐬🌍🌛🌞💫🍎🍌🍓🍐🍟🍿'\nconst VISUAL_PAUSE_MSECS = 750\nconst DEFAULT_STATE = {\n    cards: [],\n    currentPair: [],\n    matchedCardsIndexes: [],\n    guesses: 0,\n    difficulty: 4,\n    hallOfFame: null\n}\n\nclass App extends Component {\n    refTest = React.createRef();\n\n    constructor(props) {\n        super(props);\n        this.state = {...DEFAULT_STATE, cards: this.generateCards(4)};\n    }\n\n    componentDidMount() {\n        document.title = 'Tick-Tack-Toe'\n    }\n\n\n    // arrow function for this binding\n    displayHOF = hallOfFame => {\n        this.setState({hallOfFame})\n    }\n\n    generateCards(size) {\n        const difficulty = Math.pow(size, 2)\n        const result = []\n        const candidates = shuffle(SYMBOLS)\n        while (result.length < difficulty) {\n            const card = candidates.pop()\n            result.push(card, card)\n        }\n        return shuffle(result)\n    }\n\n    getFeedbackForCard(index) {\n        const {currentPair, matchedCardsIndexes} = this.state\n        const indexMatched = matchedCardsIndexes.includes(index)\n\n        if (currentPair.length < 2) {\n            return indexMatched || index === currentPair[0] ? 'visible' : 'hidden'\n        }\n\n        if (currentPair.includes(index)) {\n            return indexMatched ? 'justMatched' : 'justMismatched'\n        }\n\n        return indexMatched ? 'visible' : 'hidden'\n    }\n\n    onHandleDifficulty = (event) => {\n        const difficulty = +event.target.value;\n        this.setState({...DEFAULT_STATE, difficulty, cards: this.generateCards(difficulty)})\n    };\n\n\n    // arrow function for this scope\n    handleCardClick = index => {\n        const {currentPair} = this.state\n        if (currentPair.length === 0) {\n            this.setState({currentPair: [index]});\n            return;\n        }\n        if (currentPair.length === 2) {\n            return;\n        }\n        this.handleNewPairClosedBy(index)\n    };\n\n    handleNewPairClosedBy(index) {\n        const {cards, currentPair, guesses, matchedCardsIndexes} = this.state\n\n        const newPair = [currentPair[0], index]\n        const newGuesses = guesses + 1\n        const matched = cards[newPair[0]] === cards[newPair[1]]\n        this.setState({currentPair: newPair, guesses: newGuesses})\n        if (matched) {\n            this.setState({matchedCardsIndexes: [...matchedCardsIndexes, ...newPair]})\n        }\n        setTimeout(() => this.setState({currentPair: []}), VISUAL_PAUSE_MSECS)\n    }\n\n    render() {\n        const {cards, guesses, matchedCardsIndexes, hallOfFame} = this.state\n        const won = matchedCardsIndexes.length === cards.length;\n        return (\n            <div ref={this.refTest}>\n                <div className=\"game\">\n                    <div className=\"title\">\n                        <h1>Tic-Tac-Toe</h1>\n                        <span>Game</span>\n                    </div>\n                    <div className=\"logo\">\n                        <img src=\"https://talan.com/typo3conf/ext/subtheme_t3kit_talan/Resources/Public/Images/logo-talan.png\" alt=\"logo-Talan\"/>\n                    </div>\n                </div>\n                <div className=\"memory mt-5\">\n                    <div className=\"fares\">\n                        <h1>By Fares</h1>\n                    </div>\n                    <div className=\"w-100 mb-3\">\n                        <div className=\"d-flex\">\n                            <label className=\"w-50 my-auto\">\n                                <span className=\"badge badge-light difficulty\">Choose difficulty: </span>\n                            </label>\n                            <select className=\"form-control\" onChange={this.onHandleDifficulty} defaultValue={4}>\n                                <option value=\"2\">Easy</option>\n                                <option value=\"4\">Medium</option>\n                                <option value=\"6\">Hard</option>\n                            </select>\n                        </div>\n                    </div>\n                    <GuessCount guesses={guesses}/>\n                    <div className=\"cards\">\n                        {\n                            cards.map((card, index) => (\n                                <Card\n                                    key={index}\n                                    card={card}\n                                    index={index}\n                                    difficulty={this.state.difficulty}\n                                    feedback={this.getFeedbackForCard(index)}\n                                    onClick={this.handleCardClick}\n                                />\n                            ))\n                        }\n                    </div>\n                    {won && (\n                        hallOfFame ? <HallOfFame entries={hallOfFame}/> :\n                            <HighScoreInput guesses={guesses} onStored={this.displayHOF}/>\n                    )}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport registerServiceWorker from './registerServiceWorker'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}